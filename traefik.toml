# traefik.toml
################################################################
# Global configuration
################################################################

defaultEntryPoints = ["http"]

logLevel = "DEBUG"

[entryPoints]
  [entryPoints.http]
  address = ":1880"

# Enable retry sending request if network error
#
# Optional
#
[retry]

# Number of attempts
#
# Optional
# Default: (number servers in backend) -1
#
attempts = 3

################################################################
# Docker configuration backend
################################################################

# Enable Docker configuration backend
#
# Optional
#
[docker]

# Docker server endpoint. Can be a tcp or a unix socket endpoint.
#
# Required
#
endpoint = "unix:///var/run/docker.sock"

# Default domain used.
# Can be overridden by setting the "traefik.domain" label on a container.
#
# Required
#
domain = "docker.localhost"

# Enable watch docker changes
#
# Optional
#
watch = true

# Override default configuration template. For advanced users :)
#
# Optional
#
# filename = "docker.tmpl"

# Expose containers by default in traefik
# If set to false, containers that don't have `traefik.enable=true` will be ignored
#
# Optional
# Default: true
#
exposedbydefault = true

# Use the IP address from the binded port instead of the inner network one. For specific use-case :)

#
# Optional
# Default: false
#
usebindportip = true
# Use Swarm Mode services as data provider
#
# Optional
# Default: false
#
swarmmode = false

# Enable docker TLS connection
#
#  [docker.tls]
#  ca = "/etc/ssl/ca.crt"
#  cert = "/etc/ssl/docker.crt"
#  key = "/etc/ssl/docker.key"
#  insecureskipverify = true

[frontends]
  [frontends.red1]
  backend = "red1"
    [frontends.frontend1.routes.test_1]
    rule = "Host:red1.localhost"
  [frontends.red2]
  backend = "red1"
  passHostHeader = true
    [frontends.frontend2.routes.test_1]
    # rule = "Host:{subdomain:[a-z]+}.localhost"
    rule = "Host:red2.localhost"
